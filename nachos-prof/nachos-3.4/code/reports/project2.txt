Anne Nguyen PID:5643071
My role in this project was writing the fork and the exit system calls.
The way that fork was designed was it had to first check to see if there 
was enough memory in the system to create a new process and if there wasn't,
the call was told to exit with a failure code of -1.
For a child process to be forked, there must be enough space for the child and it
would need its own address space. I functionally cloned the parent's address space,
and then started to associate the child's details to the new address space.
Afterwards, a program control block (pcb) is created to handle the child's information
related to the pcb, as called from the pcb.cc. 
The machine registers are then set up for the child and saved.
Only then is the fork really called for the child and there is an output statement 
added that is related to the requests in the program description pdf. 
The parent user level's process's register state is then restored and 
the process id is returned.
For the doFork function to work as intended, it also needs the childfunction
to be set up. The state of the registers have to be restored
in the case that they have been changed by something else.
The page table then must be restored in case something changed it.
Then, if the PCReg is equal to the machine's PCReg, the child is created.
The machine is told to run.
For doFork function called upon functions and constructors from addrspace.cc as 
well since the first part of the set up needed to check if there was enough space for 
the child process and then as a way to create a new address space for the child.
Tests are ran on the code by using the fork.c, located in the test folder of the
code folder. Through the usage of the phrase "make fork" due to the Makefile
having fork included, I was able to test the code through that method.

I did originally make edits to doExit according to the instructions given in the
implementation guide, however, as I tested the doExit by using the Fork.c test file
since it does call Exit there, I found that there issues causing segmentation faults.
To resolve those, I reverted the code of doExit to the original set up and
it was able to run completely after that.


Dillon Archer PID: 6224872

My role for the project was the implementation of the Exec and
Yield syscalls. Yield was relatively straightforward as it once
as it simply used the yield function within thread.cc to transfer
control of the CPU to another thread is user mode.

For Exec, the execution of this syscall is similar to that of
StartProcess in progtest.cc. First, a pointer to an OpenFile object was created
and the filed that was called is stored within this pointer. Then, we check to 
see if the pointer is null. If so, then the execution fails and we know the files
doesn't exist that the specified location and the program exits. If not, 
then the pcb from the currentThread is stored within a new pcb pointer and The
address space of the current thread is deleted. A new address space is then created
so that we can now run the specified user program. When this is done we now need to verify
that the address space was created successfully. When we created the address space,
there is a boolean variable called valid that is either set to true or false
which indicates whether or not address space creation was successful. It can fail for a number
of reasons such as if there aren't enough free pages available within our
memory manager that we can assign to the new address space. If it is successful, then
we initialize the registers and set the new pcb to be the old pcb from the previous thread
address space that we deleted. Then we execute the user program


Nagarjun Tumkur Sharathkumar
PID: 6366321

In my role for this project, I implemented the doKill and doJoin functions for Kill and Join system calls. 
For the Kill system call, the process involves validating the provided process ID (PID) and terminating the 
specified process. If the PID is invalid, the function returns -1; otherwise, it checks for self-termination
and performs cleanup accordingly. In cases where the target process is different, it removes the thread from 
the scheduler, displays a termination message, and returns 0 for success.

The Join() allows a calling process to wait for the termination of a specified child process identified by its
PID. The implementation includes validating the PID, checking the parent-child relationship, and using a loop
to yield the calling thread until the child process exits. Upon exit, it retrieves the exit status, deletes
the Process Control Block (PCB) of the child, and returns the exit status to the calling process. Testing 
involved using fork.c and join.c to ensure correct process creation, termination, and proper handling of exit 
statuses. The implemented functions enhance process management in the Nachos operating system.
