Anne Nguyen PID:5643071
My role in this project was writing the fork and the exit system calls.
The way that fork was designed was it had to first check to see if there 
was enough memory in the system to create a new process and if there wasn't,
the call was told to exit with a failure code of -1.
For a child process to be forked, there must be enough space for the child and it
would need its own address space. I functionally cloned the parent's address space,
and then started to associate the child's details to the new address space.
Afterwards, a program control block (pcb) is created to handle the child's information
related to the pcb, as called from the pcb.cc. 
The machine registers are then set up for the child and saved.
Only then is the fork really called for the child and there is an output statement 
added that is related to the requests in the program description pdf. 
The parent user level's process's register state is then restored and 
the process id is returned.
For the doFork function to work as intended, it also needs the childfunction
to be set up. The state of the registers have to be restored
in the case that they have been changed by something else.
The page table then must be restored in case something changed it.
Then, if the PCReg is equal to the machine's PCReg, the child is created.
The machine is told to run.
For doFork function called upon functions and constructors from addrspace.cc as 
well since the first part of the set up needed to check if there was enough space for 
the child process and then as a way to create a new address space for the child.
Tests are ran on the code by using the fork.c, located in the test folder of the
code folder. Through the usage of the phrase "make fork" due to the Makefile
having fork included, I was able to test the code through that method.
I did originally make edits to doExit according to the instructions given in the
implementation guide, however, as I tested the doExit by using the Fork.c test file
since it does call Exit there, I found that there issues causing segmentation faults.
To resolve those, I reverted the code of doExit to the original set up and
it was able to run completely after that.
